// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PortfolioRealtime.FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Packet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static Packet GetRootAsPacket(ByteBuffer _bb) { return GetRootAsPacket(_bb, new Packet()); }
  public static Packet GetRootAsPacket(ByteBuffer _bb, Packet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Packet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PortfolioRealtime.FlatBuffers.PacketType DataType { get { int o = __p.__offset(4); return o != 0 ? (PortfolioRealtime.FlatBuffers.PacketType)__p.bb.Get(o + __p.bb_pos) : PortfolioRealtime.FlatBuffers.PacketType.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public PortfolioRealtime.FlatBuffers.HeartbeatPacket DataAsHeartbeat() { return Data<PortfolioRealtime.FlatBuffers.HeartbeatPacket>().Value; }
  public PortfolioRealtime.FlatBuffers.ChatMessagePacket DataAsChatMessage() { return Data<PortfolioRealtime.FlatBuffers.ChatMessagePacket>().Value; }

  public static Offset<PortfolioRealtime.FlatBuffers.Packet> CreatePacket(FlatBufferBuilder builder,
      PortfolioRealtime.FlatBuffers.PacketType data_type = PortfolioRealtime.FlatBuffers.PacketType.NONE,
      int dataOffset = 0) {
    builder.StartTable(2);
    Packet.AddData(builder, dataOffset);
    Packet.AddDataType(builder, data_type);
    return Packet.EndPacket(builder);
  }

  public static void StartPacket(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDataType(FlatBufferBuilder builder, PortfolioRealtime.FlatBuffers.PacketType dataType) { builder.AddByte(0, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(1, dataOffset, 0); }
  public static Offset<PortfolioRealtime.FlatBuffers.Packet> EndPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PortfolioRealtime.FlatBuffers.Packet>(o);
  }
  public static void FinishPacketBuffer(FlatBufferBuilder builder, Offset<PortfolioRealtime.FlatBuffers.Packet> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPacketBuffer(FlatBufferBuilder builder, Offset<PortfolioRealtime.FlatBuffers.Packet> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
